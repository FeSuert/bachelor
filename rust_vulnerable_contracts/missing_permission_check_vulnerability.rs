use anchor_lang::prelude::*;

declare_id!("F1234567890123456789012345678901234567890");

#[program]
pub mod permission_check {
    use super::*;

    pub fn init_market(ctx: Context<InitMarket>, market_data: MarketData) -> Result<()> {
        let market = &mut ctx.accounts.market;
        market.admin = *ctx.accounts.user.to_account_info().key;
        market.name = market_data.name;
        market.description = market_data.description;
        Ok(())
    }
}

#[derive(Accounts)]
pub struct InitMarket<'info> {
    #[account(init, payer = user, space = 8 + 256)]
    pub market: Account<'info, MarketAccount>,
    #[account(mut)]
    pub user: Signer<'info>,
    pub system_program: Program<'info, System>,
}

#[account]
pub struct MarketAccount {
    pub admin: Pubkey,
    pub name: String,
    pub description: String,
}

#[derive(AnchorSerialize, AnchorDeserialize)]
pub struct MarketData {
    pub name: String,
    pub description: String,
}

//Recommendation:Hardcode an administrator key in the program and set invoke signer key to the key.