use anchor_lang::prelude::*;
use anchor_spl::token::{self, Token};

declare_id!("F1234567890123456789012345678901234567890");

#[program]
pub mod system_account_check {
    use super::*;

    pub fn transfer_tokens(ctx: Context<TransferTokens>, amount: u64) -> Result<()> {
        let account_info_iter = &mut ctx.remaining_accounts.iter();
        let token_program_id = next_account_info(account_info_iter)?;

        let cpi_accounts = token::Transfer {
            from: ctx.accounts.from.to_account_info(),
            to: ctx.accounts.to.to_account_info(),
            authority: ctx.accounts.authority.to_account_info(),
        };
        let cpi_program = token_program_id.clone();
        let cpi_ctx = CpiContext::new(cpi_program, cpi_accounts);
        token::transfer(cpi_ctx, amount)?;

        Ok(())
    }
}

#[derive(Accounts)]
pub struct TransferTokens<'info> {
    #[account(mut)]
    pub from: AccountInfo<'info>,
    #[account(mut)]
    pub to: AccountInfo<'info>,
    pub authority: Signer<'info>,
}

//Recommendation: Hardcode sysvar key in the program and check when passing in.