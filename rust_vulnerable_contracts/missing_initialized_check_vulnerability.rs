use anchor_lang::prelude::*;

declare_id!("F1234567890123456789012345678901234567890");

#[program]
pub mod initialized_check {
    use super::*;

    pub fn initialize_hello_state(ctx: Context<Initialize>) -> Result<()> {
        let hello_state = &mut ctx.accounts.hello_state;
        hello_state.data = 42;
        Ok(())
    }
}

#[derive(Accounts)]
pub struct Initialize<'info> {
    #[account(init, payer = user, space = 8 + 40)]
    pub hello_state: Account<'info, HelloState>,
    #[account(mut)]
    pub user: Signer<'info>,
    pub system_program: Program<'info, System>,
}

#[account]
pub struct HelloState {
    pub data: u64,
}

// let hello_state_account = next_account_info(accounts_iter)?;
// let mut hello_state = HelloState::try_from_slice(&hello_state_account.data.borrow())?;
// if hello_state.is_initialized {
//     return Err(ProgramError::AccountAlreadyInitialized);
// }
// hello_state.is_initialized = true;
// hello_state.serialize(&mut &mut hello_state_account.data.borrow_mut()[..])?;